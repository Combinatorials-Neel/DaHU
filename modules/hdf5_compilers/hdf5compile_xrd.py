"""
Functions for XRD parsing (Rigaku SmartLab and ESRF NeXuS)
"""

import fabio
import h5py

from ..functions.functions_shared import *
from ..functions.functions_xrd import *
from ..hdf5_compilers.hdf5compile_base import *

SMARTLAB_WRITER_VERSION = "0.2"


def get_scan_numbers(filename):
    """
    Returns the scan numbers from the given filename.

    The scan numbers are stored in the filename of the given filename
    as 'XYY.ras', where X is the scan number in the x direction and
    Y is the scan number in the y direction.

    Parameters
    ----------
    filename : str
        The filepath to the XRD data file (.ras)

    Returns
    -------
    tuple
        A tuple containing the x and y scan numbers.
    """
    pattern = r"_(\d+)(?:_\d+)?\."  # Regular expression to match with all different filename structures (img and ras/lst)
    match = re.search(pattern, filename)
    idx = match.group(1)

    return idx


def group_files_by_position(filename_list, authorized_files=None):
    if authorized_files is None:
        authorized_files = ["ras", "lst", "img"]

    grouped_dictionary = {}
    for filename in filename_list:
        if filename.split(".")[-1] in authorized_files:
            try:
                scan_numbers = get_scan_numbers(filename)
            except AttributeError:
                continue
            if scan_numbers in grouped_dictionary.keys():
                grouped_dictionary[scan_numbers].append(filename)
            elif scan_numbers not in grouped_dictionary.keys():
                grouped_dictionary[scan_numbers] = [filename]

    return grouped_dictionary


def read_data_from_ras(file_path):
    """
    Reads a .ras file and returns the following dictionaries and a list:

    disp_dict: A dictionary containing the values of the *DISP_ keywords
    file_dict: A dictionary containing the values of the *FILE_ keywords
    hw_dict: A dictionary containing the values of the *HW_ keywords
    meas_dict: A dictionary containing the values of the *MEAS_ keywords
    data: A list of lists, where each sublist contains the data for a specific angle

    Returns
    -------
    tuple
        A tuple containing the disp_dict, file_dict, hw_dict, meas_dict, and data
    """
    with open(file_path, "r", encoding="iso-8859-1") as file:
        lines = file.readlines()

    parse_ignore = [
        "*RAS_DATA_START",
        "*RAS_HEADER_START",
        "*RAS_HEADER_END",
        "*RAS_INT_START",
        "*RAS_INT_END",
        "*RAS_TEMPERATURE_START",
        "*RAS_TEMPERATURE_END",
        "*RAS_DATA_END",
    ]
    disp_dict = {}
    file_dict = {}
    hw_dict = {}
    meas_dict = {}
    data = []

    # Split the header into different metadata types
    for line in lines:
        if line.startswith("*"):
            formatted_line = line.strip().split(" ", 1)
            if formatted_line[0] not in parse_ignore:
                # Skip DISP lines, they are useless outside the SmartLab software
                if formatted_line[0].startswith("*DISP"):
                    continue

                elif formatted_line[0].startswith("*FILE"):
                    key = formatted_line[0].replace("*FILE_", "")
                    file_dict[key] = formatted_line[1]

                elif formatted_line[0].startswith("*HW"):
                    key = formatted_line[0].replace("*HW_", "")
                    hw_dict[key] = formatted_line[1]

                elif formatted_line[0].startswith("*MEAS"):
                    if "INTERNAL" in formatted_line[0]:
                        continue
                    else:
                        key = formatted_line[0].replace("*MEAS_", "")
                        meas_dict[key] = formatted_line[1]

        else:
            # Read the data inside the file
            data.append([[elm] for elm in line.strip().split(" ")])

    return file_dict, hw_dict, meas_dict, data


def set_instrument_and_result_from_dict(xrd_dict, node):
    """
    Writes the contents of the xrd_dict dictionary to the HDF5 node.

    Args:
        xrd_dict (dict): A dictionary containing the XRD data and metadata, generated by the read_data_from_ras function.
        node (h5py.Group): The HDF5 group to write the data to.
    Returns:
        None
    """

    for key, value in xrd_dict.items():
        if isinstance(value, dict):
            set_instrument_and_result_from_dict(value, node.create_group(key))
        elif isinstance(value, str):
            if key == "UNIT":
                continue
            node[key] = value.replace('"', "")
            if key in ["A", "B", "C"]:
                node[key].attrs["units"] = "nm"
        elif isinstance(value, list):
            node.create_dataset(key, data=value)
        else:
            node[key] = value

    return None


def read_image_from_img(filepath):
    """
    Reads the header and data of a 2D detector image file and returns them as a tuple.

    Parameters
    ----------
    filepath : pathlib.Path
        The path to the .ras file of the XRD measurement.

    Returns
    -------
    tuple
        A tuple containing the header and data of the 2D detector image, as read from the file.
    """

    with open(filepath, "rb") as f:
        img = fabio.open(f)
        img_header = img.header
        img_data = img.data

    return img_header, img_data


def write_smartlab_to_hdf5(hdf5_path, source_path, dataset_name, mode="a"):
    """
    Writes the contents of the XRD data file (.ras) to the given HDF5 file.

    Args:
        hdf5_path (str or Path): The path to the HDF5 file to write the data to.
        mode (str, optional): The mode to open the HDF5 file in. Defaults to "a".

    Returns:
        None
    """
    if isinstance(hdf5_path, str):
        hdf5_path = Path(hdf5_path)
    if isinstance(source_path, str):
        source_path = Path(source_path)

    if dataset_name is None:
        dataset_name = source_path.stem

    with h5py.File(hdf5_path, mode) as hdf5_file:
        xrd_group = hdf5_file.create_group(dataset_name)
        xrd_group.attrs["HT_type"] = "xrd"
        xrd_group.attrs["instrument"] = "Rigaku Smartlab"
        xrd_group.attrs["smartlab_writer"] = SMARTLAB_WRITER_VERSION

        for ras_name in safe_rglob(source_path, pattern="*.ras"):
            if "test" in str(ras_name):
                continue
            ras_path = source_path / ras_name
            file_dict, hw_dict, meas_dict, data = read_data_from_ras(ras_path)
            x_pos = float(meas_dict["COND_AXIS_POSITION-6"].strip('"'))
            y_pos = float(meas_dict["COND_AXIS_POSITION-7"].strip('"'))

            for img_name in safe_rglob(source_path, pattern="*.img"):
                if str(ras_path.stem) in str(img_name):
                    img_path = source_path / img_name
                    img_header, img_data = read_image_from_img(img_path)

            position_group = xrd_group.create_group(f"({x_pos},{y_pos})")
            position_group.attrs["index"] = get_scan_numbers(str(ras_name))
            position_group.attrs["ignored"] = False

            # Instrument group for metadata
            instrument_group = position_group.create_group("instrument")
            instrument_group.attrs["NX_class"] = "HTinstrument"

            instrument_group["x_pos"] = convertFloat(x_pos)
            instrument_group["y_pos"] = convertFloat(y_pos)
            instrument_group["x_pos"].attrs["units"] = "mm"
            instrument_group["y_pos"].attrs["units"] = "mm"

            file_group = instrument_group.create_group("file")
            save_dict_to_hdf5(file_group, file_dict)

            hw_group = instrument_group.create_group("hardware")
            save_dict_to_hdf5(hw_group, hw_dict)

            meas_group = instrument_group.create_group("parameters")
            save_dict_to_hdf5(meas_group, meas_dict)

            img_metadata_group = instrument_group.create_group("image")
            save_dict_to_hdf5(img_metadata_group, img_header)

            # Data group
            measurement_group = position_group.create_group("measurement")
            integrated_group = measurement_group.create_group("integrated")
            measurement_group.attrs["NX_class"] = "HTmeasurement"
            tth_data = [convertFloat(elm[0][0]) for elm in data]
            counts_data = [convertFloat(elm[1][0]) for elm in data]
            q_data = xrd_tth_q(tth_data, energy = 8.04)
            intensity_data = [i / np.sum(counts_data) for i in counts_data]

            tth_group = integrated_group.create_dataset(
                "tth", (len(tth_data),), data=tth_data, dtype="float"
            )
            q_group = integrated_group.create_dataset(
                "q", (len(tth_data),), data=q_data, dtype="float"
            )
            counts_group = integrated_group.create_dataset(
                "counts", (len(counts_data),), data=counts_data, dtype="float"
            )
            intensity_group = integrated_group.create_dataset(
                "intensity", (len(counts_data),), data=intensity_data, dtype="float"
            )

            tth_group.attrs["units"] = "deg"
            q_group.attrs["units"] = "nm-1"
            counts_group.attrs["units"] = "a.u."
            intensity_group.attrs["units"] = "a.u."


            # Image group
            measurement_group.create_dataset("2Dimage", img_data.shape, data=img_data)

    return None
